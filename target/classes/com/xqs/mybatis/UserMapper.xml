<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xqs.mybatis.UserMapper">
<cache></cache>
	<resultMap type="User" id="userMap">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="ip" column="ip" />
	</resultMap>
	
	<resultMap type="Blog" id="blogMap">
	   <!-- 通常我们的DTO或领域模型是可以修改属性的，但有些情况希望使用不可变类，这样只需要定义构造方法而不用暴露设置属性的共有方法 -->
	   <constructor>
	       <!-- column,jdbcType,javaType,typeHandler和id,result元素的定义是一致的, -->
	       <!-- 3.4.3版本开始，通过指定具体的名字，可以以任意书序写入arg元素，在mybatis-config中需要配置useActualParamName为true，该参数是默认开启的 -->
           <idArg column="blog_id" javaType="int" name="id"/>
           <arg column="content" javaType="String" name="content" />
       </constructor>
	   <!-- column：数据库中的列名或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)方法的参数一样 -->
	   <!-- property：映射到列结果的字段或属性。如果用来匹配的JavaBeans存在给定名字的属性，name他将会被使用。 -->
	   <!-- jdbcType：JDBC类型，只需要在“可能执行插入、更新和删除的”“允许空值的列上”指定JDBC类型。这是JDBC的要求而非mybatis的要求，具体包含哪些JDBC类型查看JdbcType -->
	   <!-- javaType：一个Java类的完全限定名或别名。如果映射到一个JavaBean，mybatis通常可以判定类型。然而，如果映射到HashMap，则应该明确地指定javaType来保证期望行为 -->
	   <!-- typeHandler：使用这个属性，可以覆盖默认类型处理器 -->
	   <!-- id和result其实都是JavaBean的属性描述，但id表示的是对象的标识属性，在比较对象实例时用到，可以提高整体的性能，尤其是缓存和嵌套结果映射(待验证) -->
	   <id column="blog_id" property="id" javaType="int" jdbcType="INTEGER"></id>
	   <!-- result包含的属性和id元素一致，只是id元素 -->
	   <result column="content" property="content"/>
	   <association property="author" column="blog_author_id" javaType="Author">
	       <id property="id" column="author_id" />
	       <result property="username" column="author_username"/>
	   </association>
	   
	</resultMap>

	<!-- id：全局唯一，标识业务，对应mapper接口的方法名 -->
	<!-- parameterType：optional，mybatis会根据TypeHandler推断出具体传入语句的参数 -->
	<!-- resultType：从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是可以包含的类型，而不是集合本身。resultType和resultMap不能同时使用 -->
	<!-- resultMap：外部resultMap的命名引用。强大的特性 -->
	<!-- flushCache：将其设置为true，任何时候只要语句被调用，都会导致“本地缓存”(也叫“一级缓存”)和“二级缓存”都会被清空，默认值false -->
	<!-- useCache：将其设置为true，将会导致本条语句的结果被二级缓存，默认值：对select元素为true -->
	<!-- timeout：在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值unset(依赖驱动) -->
	<!-- fetchSize：这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为unset(依赖驱动) -->
	<!-- statementType：STATEMENT,PREPARED,CALLABLE三选一。默认值PREPARED -->
	<!-- resultSetType：FORWARD_ONLY,SCROLL_SENSITIVE,SCROLL_INSENSITIVE中的一个，默认值unset(依赖驱动) -->
	<!-- databaseId：如果mybatis-config配置了databaseProvider，mybatis会加载带databaseId的语句 -->
	<!-- resultOrdered：仅针对嵌套结果select语句适用，如果为true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生对前面结果集引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用 -->
	<!-- resultSets： 仅对多结果集的情况适用，他将列出语句执行后返回的结果集并给每个结果集一个名称，名称是逗号分隔的 -->
	<!-- map/hashmap并不是非常好的领域模型，所以简单查询可以用map，复杂查询可以使用下面第二种方式 -->
	<select id="selectUser2Map" parameterType="int" resultType="hashmap">
		select
		id,name,inet_ntoa(ip) from user where id = #{id}
	</select>

	<!-- mybatis后台会创建一个ResultMap，在基于属性名映射到JavaBean上 -->
	<select id="selectUser" parameterType="int" resultMap="userMap"><!-- -->
		select id as "id",name as "name",inet_ntoa(ip) as "ip" from user where
		id = #{id}
	</select>

	<update id="updateUserName">
		update user set name=#{name} where id=#{id}
	</update>
</mapper>